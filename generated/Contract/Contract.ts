// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewRound extends ethereum.Event {
  get params(): NewRound__Params {
    return new NewRound__Params(this);
  }
}

export class NewRound__Params {
  _event: NewRound;

  constructor(event: NewRound) {
    this._event = event;
  }

  get number(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get prevTotalAllocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endBlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__getPoolResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Contract__getPoolAndUserInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Contract__getPoolUserInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__getRoundLengthAndLastEndBlockResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Contract__roundsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allocAdjustBlocks(): BigInt {
    let result = super.call(
      "allocAdjustBlocks",
      "allocAdjustBlocks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allocAdjustBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocAdjustBlocks",
      "allocAdjustBlocks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allocPointDecayNumerator(): BigInt {
    let result = super.call(
      "allocPointDecayNumerator",
      "allocPointDecayNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allocPointDecayNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocPointDecayNumerator",
      "allocPointDecayNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blocksInGenesisEpoch(): BigInt {
    let result = super.call(
      "blocksInGenesisEpoch",
      "blocksInGenesisEpoch():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_blocksInGenesisEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blocksInGenesisEpoch",
      "blocksInGenesisEpoch():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnEqualEfficiency(): BigInt {
    let result = super.call(
      "burnEqualEfficiency",
      "burnEqualEfficiency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_burnEqualEfficiency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnEqualEfficiency",
      "burnEqualEfficiency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devaddr(): Address {
    let result = super.call("devaddr", "devaddr():(address)", []);

    return result[0].toAddress();
  }

  try_devaddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("devaddr", "devaddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  equal(): Address {
    let result = super.call("equal", "equal():(address)", []);

    return result[0].toAddress();
  }

  try_equal(): ethereum.CallResult<Address> {
    let result = super.tryCall("equal", "equal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  genesisEqualPerBlock(): BigInt {
    let result = super.call(
      "genesisEqualPerBlock",
      "genesisEqualPerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_genesisEqualPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "genesisEqualPerBlock",
      "genesisEqualPerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAPY(token0: Address, token1: Address): BigInt {
    let result = super.call("getAPY", "getAPY(address,address):(uint256)", [
      ethereum.Value.fromAddress(token0),
      ethereum.Value.fromAddress(token1)
    ]);

    return result[0].toBigInt();
  }

  try_getAPY(token0: Address, token1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getAPY", "getAPY(address,address):(uint256)", [
      ethereum.Value.fromAddress(token0),
      ethereum.Value.fromAddress(token1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentRoundAllocPoint(_token0: Address, _token1: Address): BigInt {
    let result = super.call(
      "getCurrentRoundAllocPoint",
      "getCurrentRoundAllocPoint(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentRoundAllocPoint(
    _token0: Address,
    _token1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentRoundAllocPoint",
      "getCurrentRoundAllocPoint(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEqualBlockReward(_from: BigInt, _to: BigInt): BigInt {
    let result = super.call(
      "getEqualBlockReward",
      "getEqualBlockReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to)
      ]
    );

    return result[0].toBigInt();
  }

  try_getEqualBlockReward(
    _from: BigInt,
    _to: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEqualBlockReward",
      "getEqualBlockReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_from),
        ethereum.Value.fromUnsignedBigInt(_to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastRoundAllocPoint(_token0: Address, _token1: Address): BigInt {
    let result = super.call(
      "getLastRoundAllocPoint",
      "getLastRoundAllocPoint(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );

    return result[0].toBigInt();
  }

  try_getLastRoundAllocPoint(
    _token0: Address,
    _token1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastRoundAllocPoint",
      "getLastRoundAllocPoint(address,address):(uint256)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(_tokenA: Address, _tokenB: Address): Contract__getPoolResult {
    let result = super.call(
      "getPool",
      "getPool(address,address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );

    return new Contract__getPoolResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getPool(
    _tokenA: Address,
    _tokenB: Address
  ): ethereum.CallResult<Contract__getPoolResult> {
    let result = super.tryCall(
      "getPool",
      "getPool(address,address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getPoolResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getPoolAllocPoint(_tokenA: Address, _tokenB: Address, index: BigInt): BigInt {
    let result = super.call(
      "getPoolAllocPoint",
      "getPoolAllocPoint(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenA),
        ethereum.Value.fromAddress(_tokenB),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPoolAllocPoint(
    _tokenA: Address,
    _tokenB: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolAllocPoint",
      "getPoolAllocPoint(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenA),
        ethereum.Value.fromAddress(_tokenB),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolAndUserInfo(
    token0: Address,
    token1: Address,
    user: Address
  ): Contract__getPoolAndUserInfoResult {
    let result = super.call(
      "getPoolAndUserInfo",
      "getPoolAndUserInfo(address,address,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromAddress(user)
      ]
    );

    return new Contract__getPoolAndUserInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getPoolAndUserInfo(
    token0: Address,
    token1: Address,
    user: Address
  ): ethereum.CallResult<Contract__getPoolAndUserInfoResult> {
    let result = super.tryCall(
      "getPoolAndUserInfo",
      "getPoolAndUserInfo(address,address,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getPoolAndUserInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getPoolUserInfo(
    _tokenA: Address,
    _tokenB: Address,
    _address: Address
  ): Contract__getPoolUserInfoResult {
    let result = super.call(
      "getPoolUserInfo",
      "getPoolUserInfo(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_tokenA),
        ethereum.Value.fromAddress(_tokenB),
        ethereum.Value.fromAddress(_address)
      ]
    );

    return new Contract__getPoolUserInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPoolUserInfo(
    _tokenA: Address,
    _tokenB: Address,
    _address: Address
  ): ethereum.CallResult<Contract__getPoolUserInfoResult> {
    let result = super.tryCall(
      "getPoolUserInfo",
      "getPoolUserInfo(address,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_tokenA),
        ethereum.Value.fromAddress(_tokenB),
        ethereum.Value.fromAddress(_address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getPoolUserInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRoundLengthAndLastEndBlock(): Contract__getRoundLengthAndLastEndBlockResult {
    let result = super.call(
      "getRoundLengthAndLastEndBlock",
      "getRoundLengthAndLastEndBlock():(uint256,uint256)",
      []
    );

    return new Contract__getRoundLengthAndLastEndBlockResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRoundLengthAndLastEndBlock(): ethereum.CallResult<
    Contract__getRoundLengthAndLastEndBlockResult
  > {
    let result = super.tryCall(
      "getRoundLengthAndLastEndBlock",
      "getRoundLengthAndLastEndBlock():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getRoundLengthAndLastEndBlockResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUserInfoAmount(_tokenA: Address, _tokenB: Address): BigInt {
    let result = super.call(
      "getUserInfoAmount",
      "getUserInfoAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );

    return result[0].toBigInt();
  }

  try_getUserInfoAmount(
    _tokenA: Address,
    _tokenB: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserInfoAmount",
      "getUserInfoAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingEqual(
    _token0: Address,
    _token1: Address,
    _user: Address,
    _maxIter: BigInt
  ): BigInt {
    let result = super.call(
      "pendingEqual",
      "pendingEqual(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_maxIter)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingEqual(
    _token0: Address,
    _token1: Address,
    _user: Address,
    _maxIter: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingEqual",
      "pendingEqual(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_maxIter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: Address, param1: Address): Contract__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(address,address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Contract__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_poolInfo(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Contract__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(address,address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  rounds(param0: BigInt): Contract__roundsResult {
    let result = super.call(
      "rounds",
      "rounds(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__roundsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_rounds(param0: BigInt): ethereum.CallResult<Contract__roundsResult> {
    let result = super.tryCall(
      "rounds",
      "rounds(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__roundsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _equal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _devaddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _genesisEqualPerBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _blocksInGenesisEpoch(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _allocAdjustBlocks(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _weth(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnEqualAsFeeCall extends ethereum.Call {
  get inputs(): BurnEqualAsFeeCall__Inputs {
    return new BurnEqualAsFeeCall__Inputs(this);
  }

  get outputs(): BurnEqualAsFeeCall__Outputs {
    return new BurnEqualAsFeeCall__Outputs(this);
  }
}

export class BurnEqualAsFeeCall__Inputs {
  _call: BurnEqualAsFeeCall;

  constructor(call: BurnEqualAsFeeCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnEqualAsFeeCall__Outputs {
  _call: BurnEqualAsFeeCall;

  constructor(call: BurnEqualAsFeeCall) {
    this._call = call;
  }
}

export class BuyBackAndBurnCall extends ethereum.Call {
  get inputs(): BuyBackAndBurnCall__Inputs {
    return new BuyBackAndBurnCall__Inputs(this);
  }

  get outputs(): BuyBackAndBurnCall__Outputs {
    return new BuyBackAndBurnCall__Outputs(this);
  }
}

export class BuyBackAndBurnCall__Inputs {
  _call: BuyBackAndBurnCall;

  constructor(call: BuyBackAndBurnCall) {
    this._call = call;
  }

  get _tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BuyBackAndBurnCall__Outputs {
  _call: BuyBackAndBurnCall;

  constructor(call: BuyBackAndBurnCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _burnFee(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositToCall extends ethereum.Call {
  get inputs(): DepositToCall__Inputs {
    return new DepositToCall__Inputs(this);
  }

  get outputs(): DepositToCall__Outputs {
    return new DepositToCall__Outputs(this);
  }
}

export class DepositToCall__Inputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _burnFee(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class DepositToCall__Outputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }
}

export class DevCall extends ethereum.Call {
  get inputs(): DevCall__Inputs {
    return new DevCall__Inputs(this);
  }

  get outputs(): DevCall__Outputs {
    return new DevCall__Outputs(this);
  }
}

export class DevCall__Inputs {
  _call: DevCall;

  constructor(call: DevCall) {
    this._call = call;
  }

  get _devaddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DevCall__Outputs {
  _call: DevCall;

  constructor(call: DevCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAllocAdjustBlocksCall extends ethereum.Call {
  get inputs(): SetAllocAdjustBlocksCall__Inputs {
    return new SetAllocAdjustBlocksCall__Inputs(this);
  }

  get outputs(): SetAllocAdjustBlocksCall__Outputs {
    return new SetAllocAdjustBlocksCall__Outputs(this);
  }
}

export class SetAllocAdjustBlocksCall__Inputs {
  _call: SetAllocAdjustBlocksCall;

  constructor(call: SetAllocAdjustBlocksCall) {
    this._call = call;
  }

  get _blocks(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAllocAdjustBlocksCall__Outputs {
  _call: SetAllocAdjustBlocksCall;

  constructor(call: SetAllocAdjustBlocksCall) {
    this._call = call;
  }
}

export class SetAllocPointDecayNumeratorCall extends ethereum.Call {
  get inputs(): SetAllocPointDecayNumeratorCall__Inputs {
    return new SetAllocPointDecayNumeratorCall__Inputs(this);
  }

  get outputs(): SetAllocPointDecayNumeratorCall__Outputs {
    return new SetAllocPointDecayNumeratorCall__Outputs(this);
  }
}

export class SetAllocPointDecayNumeratorCall__Inputs {
  _call: SetAllocPointDecayNumeratorCall;

  constructor(call: SetAllocPointDecayNumeratorCall) {
    this._call = call;
  }

  get _decay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAllocPointDecayNumeratorCall__Outputs {
  _call: SetAllocPointDecayNumeratorCall;

  constructor(call: SetAllocPointDecayNumeratorCall) {
    this._call = call;
  }
}

export class SetBurnEqualEfficiencyCall extends ethereum.Call {
  get inputs(): SetBurnEqualEfficiencyCall__Inputs {
    return new SetBurnEqualEfficiencyCall__Inputs(this);
  }

  get outputs(): SetBurnEqualEfficiencyCall__Outputs {
    return new SetBurnEqualEfficiencyCall__Outputs(this);
  }
}

export class SetBurnEqualEfficiencyCall__Inputs {
  _call: SetBurnEqualEfficiencyCall;

  constructor(call: SetBurnEqualEfficiencyCall) {
    this._call = call;
  }

  get _eff(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBurnEqualEfficiencyCall__Outputs {
  _call: SetBurnEqualEfficiencyCall;

  constructor(call: SetBurnEqualEfficiencyCall) {
    this._call = call;
  }
}

export class SetBurnerCall extends ethereum.Call {
  get inputs(): SetBurnerCall__Inputs {
    return new SetBurnerCall__Inputs(this);
  }

  get outputs(): SetBurnerCall__Outputs {
    return new SetBurnerCall__Outputs(this);
  }
}

export class SetBurnerCall__Inputs {
  _call: SetBurnerCall;

  constructor(call: SetBurnerCall) {
    this._call = call;
  }

  get _burner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnerCall__Outputs {
  _call: SetBurnerCall;

  constructor(call: SetBurnerCall) {
    this._call = call;
  }
}

export class SetCorePairAllocPointMultiplierCall extends ethereum.Call {
  get inputs(): SetCorePairAllocPointMultiplierCall__Inputs {
    return new SetCorePairAllocPointMultiplierCall__Inputs(this);
  }

  get outputs(): SetCorePairAllocPointMultiplierCall__Outputs {
    return new SetCorePairAllocPointMultiplierCall__Outputs(this);
  }
}

export class SetCorePairAllocPointMultiplierCall__Inputs {
  _call: SetCorePairAllocPointMultiplierCall;

  constructor(call: SetCorePairAllocPointMultiplierCall) {
    this._call = call;
  }

  get _m(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCorePairAllocPointMultiplierCall__Outputs {
  _call: SetCorePairAllocPointMultiplierCall;

  constructor(call: SetCorePairAllocPointMultiplierCall) {
    this._call = call;
  }
}

export class SetPoolAllocPointGainCall extends ethereum.Call {
  get inputs(): SetPoolAllocPointGainCall__Inputs {
    return new SetPoolAllocPointGainCall__Inputs(this);
  }

  get outputs(): SetPoolAllocPointGainCall__Outputs {
    return new SetPoolAllocPointGainCall__Outputs(this);
  }
}

export class SetPoolAllocPointGainCall__Inputs {
  _call: SetPoolAllocPointGainCall;

  constructor(call: SetPoolAllocPointGainCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gain(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetPoolAllocPointGainCall__Outputs {
  _call: SetPoolAllocPointGainCall;

  constructor(call: SetPoolAllocPointGainCall) {
    this._call = call;
  }
}

export class SetPoolGenesisAllocCall extends ethereum.Call {
  get inputs(): SetPoolGenesisAllocCall__Inputs {
    return new SetPoolGenesisAllocCall__Inputs(this);
  }

  get outputs(): SetPoolGenesisAllocCall__Outputs {
    return new SetPoolGenesisAllocCall__Outputs(this);
  }
}

export class SetPoolGenesisAllocCall__Inputs {
  _call: SetPoolGenesisAllocCall;

  constructor(call: SetPoolGenesisAllocCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetPoolGenesisAllocCall__Outputs {
  _call: SetPoolGenesisAllocCall;

  constructor(call: SetPoolGenesisAllocCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maxIter(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _burnFee(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
